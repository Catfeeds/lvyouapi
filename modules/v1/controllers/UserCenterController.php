<?php
/**
 * Created by PhpStorm.
 * User: 张鹏飞
 * Date: 2017/12/19
 * Time: 9:46
 */

namespace app\modules\v1\controllers;


use app\modules\components\helpers\FeiValidate;
use app\modules\v1\models\Collection;
use app\modules\v1\models\Icon;
use app\modules\v1\models\Member;
use app\modules\v1\models\Suggest;
use Gregwar\Captcha\CaptchaBuilder;

class UserCenterController extends DefaultController
{
    public $modelClass = 'app\modules\v1\models\member';
    public $author ;
    public function beforeAction($action)
    {
        if (!$this->logsign) {
            echo json_encode(['code' => 401, 'msg' => '用户未登录', 'data' => '']);
            exit();
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    // 我的收藏 - head
    public function actionMyCollectionHead()
    {
        $typename = \Yii::$app->params['typeNameforMemberCenter'];
        $one      = ['id'=>0,'typename'=>'全部'];
        array_unshift($typename,$one);
        return ['code'=>200,'data'=>$typename,'msg'=>'ok'];
    }

    // 我的收藏 - detail - 根据type获得不用的信息
    public function actionMyCollectionList()
    {
        $request        =       \Yii::$app->request;
        $typeid         =       $request->get('id',0);
        $page           =       $request->get('page',1);
        $memberid       =       $this->mid;
        // 根据 typeid 来进行获得相应的数据
        if($typeid != 0 )
            $collection = Collection::getListByTypeid($typeid,$page,$memberid);         // 根据id获取不同的数据
        else
            $collection = Collection::getListBytyAll($memberid,$page);                  // 根据数据获取详细的内容

        if(!$collection) return ['code'=>404,'data'=>'','msg'=>'未找到数据'];
        $app_url        =       \Yii::$app->params['app_url'];
        $typeid_init    =       \Yii::$app->params['typeid'];
        $typeid_init    =       array_flip($typeid_init);

        $typename_id    =       $typeid;
        // 对获得的数据处理图片和iconlist
        foreach ($collection as $k=>$v)
        {
            // 处理跳转链接
            if($typeid == 0) $typename_id = $v['typeid'];

            $collection[$k]['url']      =   $typeid_init[$typename_id] . 'detail';
            // 对litpic处理
            if(!empty($v['litpic']))
                $collection[$k]['litpic'] = $app_url . $v['litpic'];
            // 处理iconlist
            if(!empty($v['iconlist']))
            {
                $iconids            =       explode(',',$v['iconlist']);
                $iconname = Icon::getIconTwoNameByIds($iconids);
                foreach ($iconname as $v2)
                {
                    $collection[$k]['iconname'][] = $v2['iconname'];
                }
            }
        }

        return ['code'=>200,'data'=>$collection,'msg'=>'ok'];
    }

    // 删除收藏
    public function actionDelCollection()
    {
        $ids        =   \Yii::$app->request->get('ids');
        // 两种方式 , 1 传字符串
        $ids        =   explode(',',trim($ids,','));
        $re = \Yii::$app->runAction('v1/collection/del-collection-byids',['ids'=>$ids]);
        return ['code'=>200,'msg'=>'ok','data'=>''];
    }

    //个人中心 - 获取用户的基本信息
    public function actionMemberCenter()
    {
        $mid            =       $this->mid;
        $memberMessage  = Member::getMemberMessage($mid);

        if (empty($memberMessage)) return ['code'=>404,'data'=>'','msg'=>'用户未找到'];
        $app_url        =   \Yii::$app->params['app_url'];

        if(!empty($memberMessage['litpic']))
            $litpic         =  strpos($memberMessage['litpic'],'http') === false ? $app_url . $memberMessage['litpic'] : $memberMessage['litpic'] ;
            $data           = [
            'id'        =>      $mid,
            'nickname'  =>      $memberMessage['nickname'],
            'sex'       =>      $memberMessage['sex'],
            'rank'      =>      $memberMessage['rank'],
            'litpic'    =>      $litpic,
            'mobile'    =>      $memberMessage['mobile'],
            'verifystatus'    =>      $memberMessage['verifystatus'],
        ];
        return ['code'=>200,'data'=>$data,'msg'=>'ok'];
    }

    // 编辑个人中心 - 信息展示与修改
    public function actionEditMemberCenter()
    {
        $mid            =       $this->mid;
        $request        =       \Yii::$app->request;
        if($request->isGet)
        {
            $memberMessage  = Member::getMemberMessage($mid);
            if (empty($memberMessage)) return ['code'=>404,'data'=>'','msg'=>'用户未找到'];
            $app_url        =   \Yii::$app->params['app_url'];
            if(!empty($memberMessage['litpic']))
                $data           = [
                    'id'        =>      $mid,
                    'nickname'  =>      $memberMessage['nickname'],
                    'truename'  =>      $memberMessage['truename'],
                    'birth_date'=>      $memberMessage['birth_date'],
                    'sex'       =>      $memberMessage['sex'],
                    'native_place'=>    $memberMessage['native_place'],
                    'cardid'    =>      $memberMessage['cardid'],
                    'address'   =>      $memberMessage['address'],
                    'qq'        =>      $memberMessage['qq'],
                    'wechat'    =>      $memberMessage['wechat'],
                    'constellation'=>   $memberMessage['constellation'],
                    'signature' =>      $memberMessage['signature'],
                ];
            return ['code'=>200,'data'=>$data,'msg'=>'ok'];
        }elseif($request->isPost)
        {
            $memberMessage  = $request->post();
            $data           = [
                'nickname'  =>      $memberMessage['nickname'],
                'truename'  =>      $memberMessage['truename'],
                'birth_date'  =>      $memberMessage['birth_date'],
                'sex'       =>      $memberMessage['sex'],
                'native_place'=>    $memberMessage['native_place'],
                'cardid'    =>      $memberMessage['cardid'],
                'address'   =>      $memberMessage['address'],
                'qq'        =>      $memberMessage['qq'],
                'wechat'    =>      $memberMessage['wechat'],
                'constellation'=>   $memberMessage['constellation'],
                'signature' =>      $memberMessage['signature'],
            ];
            // 对信息进行是否为空判断
            foreach ($data as $k=>$v)
            {
                if(empty($data[$k])) return ['code'=>404,'msg'=>$k . '不能为空','data'=>''];
            }
            Member::updateAll($data,['mid'=>$mid]);
            return ['code'=>200,'data'=>'','msg'=>'修改成功'];
        }

    }

    // 验证用户密码是否正确
    public function actionCheckPass()
    {
        $password = \Yii::$app->request->post('password',0);
        $mid    =   $this->mid;
        $re = Member::hasMember(['mid'=>$mid,'pwd'=>$password]);
        if($re)
            return ['code'=>200,'msg'=>'ok','data'=>''];
        else
            return ['code'=>403,'msg'=>'密码错误','data'=>''];
    }

    // 国别手机号
    public function actionPhoneCityCode()
    {
        $phoneCityCode   =   \Yii::$app->params['phoneCityCode'];
        return ['code'=>200,'data'=>$phoneCityCode,'msg'=>'ok'];
    }

    // 验证新手机号 - 成功则发短信验证码,失败则返回
    public function actionCheckPhone()
    {
        $request    =       \Yii::$app->request;
        $mid        =       $this->mid;
        $mobile     =       $request->post('mobile',0);

        // 验证手机号格式
        if(! FeiValidate::isMobile($mobile)) return ['code'=>401,'msg'=>'手机号格式错误','data'=>''];

        // 验证改该手机号是否已被绑定
        if(Member::hasMember(['mid'=>$mid,'mobile'=>$mobile])) return ['code'=>401,'msg'=>'改手机号已经被绑定','data'=>''];

        // 发送短信验证码
        $msgtype = 'reg_findpwd';
        $ip      =  ip2long($request->getUserIP());
        return \Yii::$app->runAction('v1/message/send-verify-message',['mobile'=>$mobile,'msgtype'=>$msgtype,'ip'=>$ip]);

    }

    // 验证验证码信息并且修改手机号
    public function actionCheckVerifyPhone()
    {
        $request        =       \Yii::$app->request;
        $mobile         =       $request->post('mobile');
        $verify         =       $request->post('verify');
        $redis          =       \Yii::$app->redis;
        // 对验证码再次验证 - 隐含
        $redis_verify = $redis->get('sms:send:' . $mobile ) ;
        if($verify != $redis_verify)   return ['code'=>400,'data'=>'','msg'=>'修改失败,请重新发送短信验证'] ;

        // 修改用户信息
        Member::updateAll(['mobile'=>$mobile],['mid'=>$this->mid]);

        return ['code'=>200,'data'=>'','msg'=>'修改成功,请重新登录'];
    }

    // 修改密码
    public function actionModifyPass()
    {
        $request    =   \Yii::$app->request;
        $newpass    =   $request->post('newpass',1);
        $renewpass  =   $request->post('renewpass',2);
        $oldpass    =   $request->post('oldpass',0);

        //验证密码
        $mid    =   $this->mid;
        $re = Member::hasMember(['mid'=>$mid,'pwd'=>$oldpass]);
        if(!$re)
            return ['code'=>403,'msg'=>'密码错误','data'=>''];

        // 比较密码
        if($newpass !== $renewpass) return ['code'=>'401','msg'=>'两次密码不一致','data'=>''];

        Member::updateAll(['pass'=>md5($newpass)],['mid'=>$this->mid]);
        return ['code'=>200,'data'=>'','msg'=>'密码修改成功'];
    }

    // 提交意见 - 怎么展示 ?
    public function actionAddSuggest()
    {
        $request        =       \Yii::$app->request;
        $ip             =       $request->getUserIP();
        $mid            =       $this->mid;
        $content        =       $request->post('content','');
        $suggestModel   =       new Suggest();


        // 对内容和频率进行判断,每分钟不能查过5条
        if(!$content)
            return ['code'=>402,'msg'=>'内容不能为空','data'=>''];
        $count          =       $suggestModel->getSuggestCountOneMin($mid);
        if($count >= 10 )  return ['code'=>402,'msg'=>'添加频率太频繁,请稍后重试','data'=>''];

        $suggestModel->ip           =   ip2long($ip);
        $suggestModel->mid          =   $mid;
        $suggestModel->createtime   =   time();
        $re = $suggestModel->save();

        if($re)
            return ['code'=>200,'msg'=>'添加成功','data'=>''];
        else
            return ['code'=>403,'msg'=>'添加失败','data'=>''];

    }




    // 生成验证码
    public function actionCreateVerify()
    {
        $builder = new CaptchaBuilder();
        $builder->build();
    }



}